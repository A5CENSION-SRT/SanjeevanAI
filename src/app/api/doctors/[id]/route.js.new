import { NextResponse } from 'next/server';
import connectToDatabase from '@/lib/db/mongodb';
import { Doctor } from '@/lib/db/models/Doctor';
import { Case } from '@/lib/db/models/Case';
import mongoose from 'mongoose';

// GET a specific doctor by ID
export async function GET(request, { params }) {
  try {
    await connectToDatabase();
    
    const { id } = params;
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json(
        { success: false, message: 'Invalid doctor ID format' },
        { status: 400 }
      );
    }
    
    const doctor = await Doctor.findById(id);
    
    if (!doctor) {
      return NextResponse.json(
        { success: false, message: 'Doctor not found' },
        { status: 404 }
      );
    }
    
    // Get cases where this doctor has written prescriptions
    const cases = await Case.find({ 'prescription.doctorId': id })
      .populate('patientId', 'name age gender')
      .sort({ 'prescription.createdAt': -1 });
    
    return NextResponse.json({
      success: true,
      data: {
        doctor,
        cases
      }
    }, { status: 200 });
  } catch (error) {
    console.error('Error fetching doctor:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to fetch doctor', error: error.message },
      { status: 500 }
    );
  }
}

// PATCH to update a doctor
export async function PATCH(request, { params }) {
  try {
    await connectToDatabase();
    
    const { id } = params;
    const body = await request.json();
    const { name, specialization, experience, email, phone, availability } = body;
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json(
        { success: false, message: 'Invalid doctor ID format' },
        { status: 400 }
      );
    }
    
    // Check if doctor exists
    const existingDoctor = await Doctor.findById(id);
    
    if (!existingDoctor) {
      return NextResponse.json(
        { success: false, message: 'Doctor not found' },
        { status: 404 }
      );
    }
    
    // Check if email is unique if being updated
    if (email && email !== existingDoctor.email) {
      const doctorWithEmail = await Doctor.findOne({ email });
      
      if (doctorWithEmail) {
        return NextResponse.json(
          { success: false, message: 'Email is already in use by another doctor' },
          { status: 400 }
        );
      }
    }
    
    const updatedDoctor = await Doctor.findByIdAndUpdate(
      id,
      {
        ...(name !== undefined && { name }),
        ...(specialization !== undefined && { specialization }),
        ...(experience !== undefined && { experience }),
        ...(email !== undefined && { email }),
        ...(phone !== undefined && { phone }),
        ...(availability !== undefined && { availability }),
        updatedAt: new Date()
      },
      { new: true, runValidators: true }
    );
    
    return NextResponse.json({
      success: true,
      message: 'Doctor updated successfully',
      data: updatedDoctor
    }, { status: 200 });
  } catch (error) {
    console.error('Error updating doctor:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to update doctor', error: error.message },
      { status: 500 }
    );
  }
}

// DELETE a doctor
export async function DELETE(request, { params }) {
  try {
    await connectToDatabase();
    
    const { id } = params;
    
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return NextResponse.json(
        { success: false, message: 'Invalid doctor ID format' },
        { status: 400 }
      );
    }
    
    // Check if doctor has any cases with prescriptions
    const casesWithDoctor = await Case.countDocuments({ 'prescription.doctorId': id });
    
    if (casesWithDoctor > 0) {
      return NextResponse.json(
        { 
          success: false, 
          message: `Cannot delete doctor as they are associated with ${casesWithDoctor} case(s) with prescriptions` 
        },
        { status: 400 }
      );
    }
    
    const deletedDoctor = await Doctor.findByIdAndDelete(id);
    
    if (!deletedDoctor) {
      return NextResponse.json(
        { success: false, message: 'Doctor not found' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({
      success: true,
      message: 'Doctor deleted successfully',
      data: deletedDoctor
    }, { status: 200 });
  } catch (error) {
    console.error('Error deleting doctor:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to delete doctor', error: error.message },
      { status: 500 }
    );
  }
}
